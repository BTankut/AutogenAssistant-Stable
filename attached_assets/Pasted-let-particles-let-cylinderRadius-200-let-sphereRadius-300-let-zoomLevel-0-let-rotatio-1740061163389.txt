let particles = [];
let cylinderRadius = 200;
let sphereRadius = 300;
let zoomLevel = 0;
let rotationAngle = 0;

function setup() {
  createCanvas(800, 600, WEBGL);
  for (let i = 0; i < 25; i++) {
    particles.push({
      pos: createVector(
        random(-cylinderRadius, cylinderRadius),
        random(-cylinderRadius, cylinderRadius),
        random(-cylinderRadius, cylinderRadius)
      ),
      vel: createVector(
        random(-2, 2),
        random(-2, 2),
        random(-2, 2)
      ),
      acc: createVector(0, 0.1, 0),
      hue: random(360),
      size: random(5, 10)
    });
  }
  background(0);
}

function draw() {
  // Slow zoom effect
  if (frameCount % 60 === 0) {
    zoomLevel = (zoomLevel === 0) ? -100 : 0;
  }

  // Clear background with slight transparency for trails
  background(0, 20);

  // Center the scene
  translate(width/2, height/2);

  // Apply zoom effect
  translateZ(zoomLevel);

  // Rotate the container
  rotationAngle += 0.002;
  rotateY(rotationAngle);

  // External spherical container
  push();
  noFill();
  stroke(255, 100);
  strokeWeight(2);
  sphere(sphereRadius);
  pop();

  // Cylindrical container
  push();
  noFill();
  stroke(255, 200);
  strokeWeight(2);
  rotateX(PI/2);
  cylinder(cylinderRadius, cylinderRadius * 2);
  pop();

  // Update and display particles
  particles.forEach(particle => {
    // Update physics
    particle.vel.add(particle.acc);
    particle.pos.add(particle.vel);

    // Collision detection with cylinder
    let distanceToCylinder = sqrt(particle.pos.x * particle.pos.x + 
                                 particle.pos.z * particle.pos.z);
    if (distanceToCylinder > cylinderRadius) {
      let normalX = particle.pos.x / distanceToCylinder;
      let normalZ = particle.pos.z / distanceToCylinder;
      let dotProduct = particle.vel.x * normalX + 
                       particle.vel.z * normalZ;
      particle.vel.x -= 2 * dotProduct * normalX;
      particle.vel.z -= 2 * dotProduct * normalZ;
    }

    // Collision detection with sphere
    let distanceToSphere = particle.pos.mag();
    if (distanceToSphere > sphereRadius) {
      let normal = particle.pos.copy().normalize();
      let dotProduct = particle.vel.dot(normal);
      particle.vel.sub(normal.mult(2 * dotProduct));
    }

    // Damping
    particle.vel.mult(0.99);

    // Draw particle
    push();
    translate(particle.pos.x, particle.pos.y, particle.pos.z);
    rotateY(frameCount * 0.01);
    noStroke();
    fill(`hsla(${particle.hue}, 70%, 70%, 0.8)`);
    sphere(particle.size);
    pop();
  });
}